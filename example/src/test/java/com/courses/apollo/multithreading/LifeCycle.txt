1. При выполнении программы объект класса Thread может быть в одном из четырех основных состояний:
«новый», «работоспособный», «неработоспо- собный» и «пассивный».
2. При создании потока он получает состояние «новый» (NEW) и не выполняется.
3. Для перевода потока из состояния «новый» в состо- яние «работоспособный» (RUNNABLE) следует выполнить метод start(),
ко- торый вызывает метод run() — основной метод потока.
Поток может находиться в од- ном из состояний, соответствую- щих элементам статически вложен- ного перечисления
Thread.State:
NEW — поток создан, но еще не запущен;
RUNNABLE — поток выпол- няется;
BLOCKED — поток блокиро- ван;
WAITING — поток ждет окон- чания работы другого потока;
TIMED_WAITING — поток некоторое время ждет окончания другого потока;
TERMINATED — поток завершен.
Получить текущее значение состояния потока можно вызовом метода
getState().
Поток переходит в состояние «неработоспособный» в режиме ожидания (WAITING)
вызовом методов join(), wait(), suspend() (deprecated-метод) или методов ввода/вывода, которые предполагают задержку.
Для задержки потока на некоторое время (в миллисекундах) можно перевести его в режим ожидания по времени (TIMED_WAITING)
с помощью методов yield(), sleep(long millis), join(long timeout) и wait(long timeout),
при выполнении которых может гене- рироваться прерывание InterruptedException.
Вернуть потоку работоспособ- ность после вызова метода suspend() можно методом resume() (deprecated- метод),
а после вызова метода wait() — методами notify() или notifyAll().
Поток переходит в «пассивное» состояние (TERMINATED), если вызваны методы interrupt(), stop() (deprecated-метод)
или метод run() завершил выполнение, и запустить его повторно уже невозможно.
После этого, чтобы запустить по- ток, необходимо создать новый объект потока.
Метод interrupt() успешно за- вершает поток, если он находится в состоянии «работоспособный».
Если же поток неработоспособен, например, находится в состоянии TIMED_WAITING,
то метод инициирует исключение InterruptedException.
Чтобы это не про- исходило, следует предварительно вызвать метод isInterrupted(),
который про- верит возможность завершения работы потока.
При разработке не следует ис- пользовать методы принудительной остановки потока,
так как возможны проблемы с закрытием ресурсов и другими внешними объектами.
Методы suspend(), resume() и stop() являются deprecated-методами и запрещены к использованию,
так как они не являются в полной мере «потокобезопасными».